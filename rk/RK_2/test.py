from RK_2 import *
import unittest

class Test1(unittest.TestCase):
    def setUp(self):
        self.part_1 = part_1
    def test_roots(self):
        self.assertEqual(self.part_1([('Asus', 134200, 'А-класс'), ('Acer', 109990, 'А-класс'), ('ThinkPad', 64990, 'Б-класс'), ('HP', 87123, 'В-класс'), ('Dell', 204500, 'В-класс')]), [('А-класс', ['Asus', 'Acer'])])
        self.assertEqual(self.part_1([('Asus', 134200, 'А-класс'), ('Dell', 204500, 'Б-класс'), ('ThinkPad', 64990, 'Б-класс'), ('HP', 87123, 'В-класс'), ('Acer', 109990, 'В-класс')]),[('А-класс', ['Asus'])])
        self.assertEqual(self.part_1([('ThinkPad', 64990, 'А-класс'), ('Asus', 134200, 'Б-класс'), ('Dell', 204500, 'Б-класс'), ('HP', 87123, 'В-класс'), ('Acer', 109990, 'В-класс')]),[('А-класс', ['ThinkPad'])])

class Test2(unittest.TestCase):
    def setUp(self):
        self.part_2 = part_2
    def test_roots(self):
        self.assertEqual(self.part_2([('Asus', 134200, 'А-класс'), ('Acer', 109990, 'А-класс'), ('ThinkPad', 64990, 'Б-класс'), ('HP', 87123, 'В-класс'), ('Dell', 204500, 'В-класс')]), [('В-класс', 204500), ('А-класс', 134200), ('Б-класс', 64990)])
        self.assertEqual(self.part_2([('Asus', 134200, 'А-класс'), ('Dell', 204500, 'Б-класс'), ('ThinkPad', 64990, 'Б-класс'), ('HP', 87123, 'В-класс'), ('Acer', 109990, 'В-класс')]),[('Б-класс', 204500), ('А-класс', 134200), ('В-класс', 109990)])
        self.assertEqual(self.part_2([('ThinkPad', 64990, 'А-класс'), ('Asus', 134200, 'Б-класс'), ('Dell', 204500, 'Б-класс'), ('HP', 87123, 'В-класс'), ('Acer', 109990, 'В-класс')]),[('Б-класс', 204500), ('В-класс', 109990), ('А-класс', 64990)])

class Test3(unittest.TestCase):
    def setUp(self):
        self.part_3 = part_3
    def test_roots(self):
        self.assertEqual(self.part_3([('Asus', 134200, 'А-класс'), ('Acer', 109990, 'А-класс'), ('ThinkPad', 64990, 'Б-класс'), ('HP', 87123, 'В-класс'), ('Dell', 204500, 'В-класс'), ('Dell', 204500, 'Г-класс'), ('HP', 87123, 'Д-класс'), ('Acer', 109990, 'Д-класс'), ('Asus', 134200, 'Е-класс'), ('ThinkPad', 64990, 'Е-класс')]), [('Asus', 'А-класс'), ('Acer', 'А-класс'), ('ThinkPad', 'Б-класс'), ('HP', 'В-класс'), ('Dell', 'В-класс'), ('Dell', 'Г-класс'), ('HP', 'Д-класс'), ('Acer', 'Д-класс'), ('Asus', 'Е-класс'), ('ThinkPad', 'Е-класс')])
        self.assertEqual(self.part_3([('Asus', 134200, 'А-класс'), ('Acer', 109990, 'А-класс'), ('ThinkPad', 64990, 'Б-класс'), ('HP', 87123, 'В-класс'), ('Dell', 204500, 'В-класс'), ('Dell', 204500, 'Г-класс'), ('HP', 87123, 'Д-класс'), ('Acer', 109990, 'Д-класс'), ('Asus', 134200, 'Е-класс'), ('ThinkPad', 64990, 'Е-класс')]),[('Asus', 'А-класс'), ('Acer', 'А-класс'), ('ThinkPad', 'Б-класс'), ('HP', 'В-класс'), ('Dell', 'В-класс'), ('Dell', 'Г-класс'), ('HP', 'Д-класс'), ('Acer', 'Д-класс'), ('Asus', 'Е-класс'), ('ThinkPad', 'Е-класс')])
        self.assertEqual(self.part_3([('Asus', 134200, 'А-класс'), ('Acer', 109990, 'А-класс'), ('ThinkPad', 64990, 'Б-класс'), ('HP', 87123, 'В-класс'), ('Dell', 204500, 'В-класс'), ('Dell', 204500, 'Г-класс'), ('ThinkPad', 64990, 'Г-класс'), ('Acer', 109990, 'Д-класс'), ('Asus', 134200, 'Е-класс'), ('HP', 87123, 'Е-класс')]),[('Asus', 'А-класс'), ('Acer', 'А-класс'), ('ThinkPad', 'Б-класс'), ('HP', 'В-класс'), ('Dell', 'В-класс'), ('Dell', 'Г-класс'), ('ThinkPad', 'Г-класс'), ('Acer', 'Д-класс'), ('Asus', 'Е-класс'), ('HP', 'Е-класс')])

if __name__ == '__main__':
    unittest.main()
